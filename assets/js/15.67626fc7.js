(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{305:function(n,e,i){n.exports=i.p+"assets/img/Pico1.7a08efbc.jpg"},336:function(n,e,i){"use strict";i.r(e);var t=i(14),a=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"pico-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pico-4"}},[n._v("#")]),n._v(" Pico 4")]),n._v(" "),e("h2",{attrs:{id:"动态设置xrsetting中不同设备所需的-xrloader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动态设置xrsetting中不同设备所需的-xrloader"}},[n._v("#")]),n._v(" 动态设置XRSetting中不同设备所需的 XRLoader")]),n._v(" "),e("p",[e("img",{attrs:{src:i(305),alt:"设置此处的设备动态设置"}})]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('   [MenuItem("Tools/测试XR")]\n    /// <summary>\n    /// 动态设置XRPlugins\n    /// </summary>\n    public static void SetXRPlugins()\n    {\n        XRGeneralSettings androidXRSettings =\n            XRGeneralSettingsPerBuildTarget.XRGeneralSettingsForBuildTarget(BuildTargetGroup.Android);\n\n        if (androidXRSettings == null)\n        {\n            var assignedSettings = ScriptableObject.CreateInstance<XRManagerSettings>() as XRManagerSettings;\n            androidXRSettings.AssignedSettings = assignedSettings;\n            EditorUtility.SetDirty(androidXRSettings); \n        }\n\n        //Pico loaderTypeName：Unity.XR.PXR.PXR_Loader\n        //Oculus LoaderTypeName:Unity.XR.Oculus.OculusLoader\n\n        IReadOnlyList<XRLoader> list = androidXRSettings.Manager.activeLoaders;\n        for (int i = 0; i < list.Count; i++)\n        {\n            string nameTemp = list[i].GetType().FullName;\n            //取消\n            XRPackageMetadataStore.RemoveLoader(androidXRSettings.Manager, nameTemp, BuildTargetGroup.Android);\n        }\n        string loaderTypeName;\n        if (isPico)\n        {\n            //Pico\n            loaderTypeName = "Unity.XR.PXR.PXR_Loader";\n        }\n        else\n        {\n            //Oculus\n            loaderTypeName = "Unity.XR.Oculus.OculusLoader";\n        }\n        XRPackageMetadataStore.AssignLoader(androidXRSettings.Manager, loaderTypeName, BuildTargetGroup.Android);\n    }\n\n\n\n\n\n')])])]),e("ul",[e("li",[n._v("可以配合OnPreprocessBuild 来打包前自动设置防止切换Pico 跟Oculus是忘记切换。宏定义也一样以下是完整代码")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('using UnityEditor;\nusing UnityEditor.Build;\nusing UnityEditor.Build.Reporting;\nusing System;\nusing System.Collections.Generic;\nusing UnityEditor.XR.Management;\nusing UnityEditor.XR.Management.Metadata;\nusing UnityEngine;\nusing UnityEngine.XR;\nusing UnityEngine.XR.Management;\n\npublic class PreBuildCustomization : IPreprocessBuildWithReport\n{\n    private static bool isPico = false;\n\n    public int callbackOrder\n    {\n        get { return 0; }\n    }\n\n    public void OnPreprocessBuild(BuildReport report)\n    {\n        if (report.summary.platform == BuildTarget.Android)\n        {\n            // 显示弹出窗口询问用户选择平台\n            isPico = EditorUtility.DisplayDialog("当前设备打包选择", "请问是Pico设备还是Oculus设备:", "PICO", "OCULUS");\n\n            SetXRPlugins();\n            \n            if (isPico)\n            {\n                Debug.Log("Selected platform: Pico");\n                // 在这里执行Pico平台的设置修改\n                ModifyDefineSymbol("OCULUS", false);\n                ModifyDefineSymbol("PICO", true);\n            }\n            else\n            {\n                Debug.Log("Selected platform: Oculus");\n                // 在这里执行Oculus平台的设置修改\n                ModifyDefineSymbol("OCULUS", true);\n                ModifyDefineSymbol("PICO", false);\n            }\n        }\n    }\n\n    static void ModifyDefineSymbol(string symbol, bool enable)\n    {\n        List<string> defines =\n            new List<string>(PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Android).Split(\';\'));\n\n        if (enable)\n        {\n            if (!defines.Contains(symbol))\n            {\n                defines.Add(symbol);\n            }\n        }\n        else\n        {\n            if (defines.Contains(symbol))\n            {\n                defines.Remove(symbol);\n            }\n        }\n\n        PlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Android, string.Join(";", defines.ToArray()));\n    }\n\n    /// <summary>\n    /// 设置VRSetting的平台如Oculus跟Pico\n    /// </summary>\n    static void CheckVRSettingPlatom()\n    {\n        var XrSetting = XRGeneralSettings.Instance;\n\n        if (XrSetting == null)\n        {\n            Debug.LogError("XR General Settings is not available");\n        }\n    }\n\n\n    [MenuItem("Tools/测试XR")]\n    /// <summary>\n    /// 动态设置XRPlugins\n    /// </summary>\n    public static void SetXRPlugins()\n    {\n        XRGeneralSettings androidXRSettings =\n            XRGeneralSettingsPerBuildTarget.XRGeneralSettingsForBuildTarget(BuildTargetGroup.Android);\n\n        if (androidXRSettings == null)\n        {\n            var assignedSettings = ScriptableObject.CreateInstance<XRManagerSettings>() as XRManagerSettings;\n            androidXRSettings.AssignedSettings = assignedSettings;\n            EditorUtility.SetDirty(androidXRSettings); \n        }\n\n        //Pico loaderTypeName：Unity.XR.PXR.PXR_Loader\n        //Oculus LoaderTypeName:Unity.XR.Oculus.OculusLoader\n\n        IReadOnlyList<XRLoader> list = androidXRSettings.Manager.activeLoaders;\n        for (int i = 0; i < list.Count; i++)\n        {\n            string nameTemp = list[i].GetType().FullName;\n            //取消\n            XRPackageMetadataStore.RemoveLoader(androidXRSettings.Manager, nameTemp, BuildTargetGroup.Android);\n        }\n        string loaderTypeName;\n        if (isPico)\n        {\n            //Pico\n            loaderTypeName = "Unity.XR.PXR.PXR_Loader";\n        }\n        else\n        {\n            //Oculus\n            loaderTypeName = "Unity.XR.Oculus.OculusLoader";\n        }\n        XRPackageMetadataStore.AssignLoader(androidXRSettings.Manager, loaderTypeName, BuildTargetGroup.Android);\n    }\n}\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);