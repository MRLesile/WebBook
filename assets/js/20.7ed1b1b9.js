(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{324:function(n,e,t){"use strict";t.r(e);var a=t(14),i=Object(a.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"eventmanger参考模版"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventmanger参考模版"}},[this._v("#")]),this._v(" EventManger参考模版")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class EventManager\n{\n    private static EventManager instance;\n    public static EventManager Instance => instance ?? (instance = new EventManager());\n\n    private Dictionary<Type, Delegate> eventTable = new Dictionary<Type, Delegate>();\n\n    private EventManager()\n    {\n    }\n\n    public void AddListener<T>(Action<T> listener) where T : IEvent\n    {\n        Type eventType = typeof(T);\n\n        if (!eventTable.ContainsKey(eventType))\n        {\n            eventTable[eventType] = null;\n        }\n\n        eventTable[eventType] = (Action<T>) eventTable[eventType] + listener;\n    }\n\n    public void RemoveListener<T>(Action<T> listener) where T : IEvent\n    {\n        Type eventType = typeof(T);\n\n        if (eventTable.ContainsKey(eventType))\n        {\n            eventTable[eventType] = (Action<T>) eventTable[eventType] - listener;\n\n            if (eventTable[eventType] == null)\n            {\n                eventTable.Remove(eventType);\n            }\n        }\n    }\n\n    public void TriggerEvent<T>(T eventData) where T : IEvent\n    {\n        Type eventType = typeof(T);\n\n        if (eventTable.ContainsKey(eventType))\n        {\n            Action<T> callback = eventTable[eventType] as Action<T>;\n\n            if (callback != null)\n            {\n                callback(eventData);\n            }\n        }\n    }\n\n    //演示\n    public void Test()\n    {\n        //事件订阅\n        EventManager.Instance.AddListener<InputEvent>(HandleEvent);\n        \n        //事件移除\n        EventManager.Instance.RemoveListener<InputEvent>(HandleEvent);\n\n\n        //事件执行\n        InputEvent ie = new InputEvent( /*自定义参数*/);\n        EventManager.Instance.TriggerEvent(ie);\n    }\n\n    public void HandleEvent(InputEvent eEvent)\n    {\n        //Do Something\n    }\n}\n\npublic interface IEvent\n{\n}\n\n// 定义事件类\npublic class InputEvent : IEvent\n{\n    //Enter对象\n    public GameObject OnPointerObj;\n\n}\n\n\n\n")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);